var documenterSearchIndex = {"docs":
[{"location":"spelled/#Spelled-Pitch","page":"Spelled Pitch","title":"Spelled Pitch","text":"","category":"section"},{"location":"spelled/#Overview","page":"Spelled Pitch","title":"Overview","text":"","category":"section"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"Spelled pitches and intervals are the standard types of the Western music notation system. Unlike MIDI pitches, spelled pitches distinguish between enharmonically equivalent pitches such as E♭ and D♯. Similarly, spelled intervals distinguish between intervals such as m3 (minor 3rd) and a2 (augmented second) that would be equivalent in the MIDI system.","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"The easiest way to use spelled pitches and intervals is to use the string macros i (for intervals) and p (for pitches), which parse a string in a standard notation that corresponds to how spelled pitches and intervals are printed. For parsing these representations programmatically, use parsespelled and parsespelledpitch for intervals and pitches, respectively. Spelled pitch classes are represented by an uppercase letter followed by zero or more accidentals, which can be either written as b/# or as ♭/♯. Spelled pitches take an additional octave number after the letter and the accidentals.","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"julia> p\"Eb\"\nE♭\n\njulia> parsespelledpitch(\"Eb\")\nE♭\n\njulia> typeof(p\"Eb\")\nPitch{SpelledIC}\n\njulia> p\"Eb4\"\nE♭4\n\njulia> typeof(p\"Eb4\")\nPitch{SpelledInterval}","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"Spelled interval classes consist of one or more letters that indicate the quality of the interval and a number between 1 and 7 that indicates the generic interval, e.g. P1 for a perfect unison, m3 for a minor 3rd or aa4 for a double augmented 4th.","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"letter quality\ndd... diminished multiple times\nd diminished\nm minor\nP perfect\nM major\na augmented\naa... augmented multiple times","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"Spelled intervals have the same elements as intervals but additionally take a number of octaves, written a suffix +n, e.g. P1+0 or m3+20. By default, intervals are directed upwards. Downwards intervals are indicated by a negative sign, e.g. -M2+1 (a major 9th down). For interval classes, downward and upward intervals cannot be distinguish, so a downward interval is represented by its complementary upward interval:","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"julia> i\"-M3\"\nm6\n\njulia> -i\"M3\"\nm6","category":"page"},{"location":"spelled/#Details-about-the-Representation","page":"Spelled Pitch","title":"Details about the Representation","text":"","category":"section"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"Internally, spelled intervals are represented by two dimentions, fifths and octaves. The dimention of fifths is interpreted in an octave-equivalent fashion and represents an upwards interval within an octave. For example 1 is a fifth upwards, 2 is a major 2nd upwards, and -3 is a minor 3rd upwards. This corresponds to the \"line-of-fifths\" representation of interval classes.","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"The octave dimension is orthogonal to the fifths: When the octave is 0, the interval is upward within one octave; when the the octave is not 0, the corresponding number of octaves is added to the interval. In particular, negative intervals are expressed using negative octaves. For example, a m3 down is equivalent to an octave down + a M6 up, so the internal representation of -m3 is M6-1, or fifths=3, octaves=-1. Fifths and octaves can be accessed using the functions fifths and octaves, respectively.","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"In addition to the line-of-fifths representation, it can be useful to think about the interval in terms of diatonic steps (the \"generic interval\") and alterations. The function diasteps returns the diatonic steps of an interval (class) within an octave, i.e, 0 for any unison (and any multiple of an octave), 1 for any 2nd, 2 for any 3rd, etc. If you need the total number of diatonic taken by the interval, use diasteps(i) + 7*octaves(i). Since diasteps only considers the fifths dimension, negative intervals return the complementary number of steps!","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"The function alteration returns the deviation of the interval class from its major or perfect version in chromatic semitones, e.g. 1 for augmented, -1 for minor imperfect and diminished perfect, and -2 for diminished imperfect (or double-diminished perfect) intervals. Note that for negative intervals the returned value refers to the complementary interval class!","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"Since both diasteps and alteration behave somewhat unituitively for negative intervals, it can be useful to apply them to the positive interval obtained with abs instead.","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"Both functions also work on spelled pitches, where they return the name (C=0, D=1, ...) and the accidentals (positive = sharps).","category":"page"},{"location":"spelled/#Reference","page":"Spelled Pitch","title":"Reference","text":"","category":"section"},{"location":"spelled/#Types","page":"Spelled Pitch","title":"Types","text":"","category":"section"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"SpelledInterval\nSpelledIC","category":"page"},{"location":"spelled/#Pitches.SpelledInterval","page":"Spelled Pitch","title":"Pitches.SpelledInterval","text":"SpelledInterval <: Interval\n\nSpelled intervals represented as pairs of (abstract) fifths and octaves. E.g., SpelledInterval(-3, 1) represents a minor decime upwards (-3 fifths, 1 octave).\n\n\n\n\n\n","category":"type"},{"location":"spelled/#Pitches.SpelledIC","page":"Spelled Pitch","title":"Pitches.SpelledIC","text":"SpelledIC <: IntervalClass\n\nSpelled interval class represented on the line of 5ths with 0 = C. E.g., SpelledIC(3) represents a major 6th upwards or minor 3rd downwards (i.e., three 5ths up modulo octave).\n\n\n\n\n\n","category":"type"},{"location":"spelled/#Constructors","page":"Spelled Pitch","title":"Constructors","text":"","category":"section"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"spelled\nspelledp\nsic\nspc\n@i_str\n@p_str\nparsespelled\nparsespelledpitch","category":"page"},{"location":"spelled/#Pitches.spelled","page":"Spelled Pitch","title":"Pitches.spelled","text":"spelled(fifths, octaves)\n\nCreates a spelled interval from fifths and octaves.\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Pitches.spelledp","page":"Spelled Pitch","title":"Pitches.spelledp","text":"spelledp(fifths, octaves)\n\nCreates a spelled pitch from fifths and octaves.\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Pitches.sic","page":"Spelled Pitch","title":"Pitches.sic","text":"sic(fifths)\n\nCreates a spelled interval class going fifths 5ths upwards.\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Pitches.spc","page":"Spelled Pitch","title":"Pitches.spc","text":"spc(fifths)\n\nCreates a spelled pitch class. In analogy to sic, this function takes a number of 5ths.\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Pitches.@i_str","page":"Spelled Pitch","title":"Pitches.@i_str","text":"i\"str\"\n\nParse a spelled interval or interval class string. The type is determined from the string, so i\"M3+0\" returns an interval while i\"M3\" returns an interval class.\n\nSee also: @p_str, parsespelled, parsespelledpitch.\n\n\n\n\n\n","category":"macro"},{"location":"spelled/#Pitches.@p_str","page":"Spelled Pitch","title":"Pitches.@p_str","text":"p\"str\"\n\nParse a spelled pitch or pitch class string. The type is determined from the string, so p\"G4\" returns a pitch while p\"G\" returns a pitch class.\n\nSee also: @i_str, parsespelledpitch, parsespelled.\n\n\n\n\n\n","category":"macro"},{"location":"spelled/#Pitches.parsespelled","page":"Spelled Pitch","title":"Pitches.parsespelled","text":"parsespelled(str)\n\nParse a spelled interval or interval class string. The type is determined from the string, so i\"M3+0\" returns an interval while i\"M3\" returns an interval class.\n\nSee also: @i_str, parsespelledpitch.\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Pitches.parsespelledpitch","page":"Spelled Pitch","title":"Pitches.parsespelledpitch","text":"parsespelledpitch(str)\n\nParse a spelled pitch or pitch class string. The type is determined from the string, so p\"G4\" returns a pitch while p\"G\" returns a pitch class.\n\nSee also: @p_str, parsespelled.\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Other-Special-Functions","page":"Spelled Pitch","title":"Other Special Functions","text":"","category":"section"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"Internally, spelled intervals are represented as an interval class on the line of fifths plus an octave offset. These two parts can be accessed separately. The interval class part can also be converted into diatonic steps (i.e. the generic interval) and the alteration (i.e. the specific variant) relative to the major or perfect version of the interval.","category":"page"},{"location":"spelled/","page":"Spelled Pitch","title":"Spelled Pitch","text":"octaves\nfifths\ndiasteps\nalteration","category":"page"},{"location":"spelled/#Pitches.octaves","page":"Spelled Pitch","title":"Pitches.octaves","text":"octaves(i)\noctaves(p)\n\nReturn the number of octaves the interval spans. Since downward intervals are represented by a negative octave plus the complementary interval class,  negative intervals always start at -1 octaves, e.g. a minor 3rd down is represented as M6-1. For a pitch, return the octave.\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Pitches.fifths","page":"Spelled Pitch","title":"Pitches.fifths","text":"fifths(i)\nfifths(p)\n\nReturn the octave-invariant part of the interval in fifths. Negative intervals are represented as complementary intervals with negative octaves, so a minor third down is represented as M6-1. For a pitch, return the pitch class on the line of fifths.\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Pitches.diasteps","page":"Spelled Pitch","title":"Pitches.diasteps","text":"diasteps(i)\ndiasteps(p)\n\nReturn the generic diatonic steps taken by the interval modulo octaves (unison=0, 2nd=1, ..., octave=0). For pitches, return the integer that corresponds to the letter (C=0, D=1, ...).\n\n\n\n\n\n","category":"function"},{"location":"spelled/#Pitches.alteration","page":"Spelled Pitch","title":"Pitches.alteration","text":"alteration(i)\nalteration(p)\n\nReturn the number of semitones by which the interval is altered from its the perfect or major variant. For negative intervals, a positive alteration means smaller intervals. For pitches, return the accidentals (positive=sharps, 0=natural).\n\n\n\n\n\n","category":"function"},{"location":"midi/#MIDI-Pitch","page":"MIDI Pitch","title":"MIDI Pitch","text":"","category":"section"},{"location":"midi/","page":"MIDI Pitch","title":"MIDI Pitch","text":"TODO","category":"page"},{"location":"interface/#The-Generic-Interface","page":"The Generic Interface","title":"The Generic Interface","text":"","category":"section"},{"location":"interface/#Overview","page":"The Generic Interface","title":"Overview","text":"","category":"section"},{"location":"interface/#Handling-Intervals","page":"The Generic Interface","title":"Handling Intervals","text":"","category":"section"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"The operations of the generic interface are based on intervals as the fundamental elements. Intervals can be thought of as vectors in a vector space (or more precisely: a module over integers). They can be added, subtracted, negated, and multiplied with integers. Pitches, on the other hand, can be seen as points in this space and are represented as intervals in relation to an (implicit) origin. Therefore, pitch types are mainly defined as a wrapper type Pitch{Interval} that generically defines its arithmetic operations in terms of the corresponding interval type.","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"Interval types (here denoted as I) define the following operations:","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"I + I\nI - I\n-I\nI * Integer\nInteger * I\nsign(I)\nabs(I)","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"The sign indicates the logical direction of the interval by musical convention (upward = positive, downward = negative), even if the interval space is multi-dimensional. Consequently, abs ensures that an interval is neutral or upward-directed. For interval classes (which are generally undirected), the sign indicates the direction of the \"shortest\" class member:","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"julia> sign(i\"P4\")\n1\n\njulia> sign(i\"P5\") # == -i\"P4\"\n-1","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"In addition to arithmetic operations, some special intervals are defined:","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"unison(Type{I}) / zero(Type{I})\noctave(Type{I})\nchromsemi(Type{I}) (a chromatic semitone, optional)\nisstep(I) (optional, a predicate that test whether the interval is considered a \"step\")","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"Finally, some operations specify the relationship between intervals and interval classes:","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"ic(I): Returns the corresponding interval class.\nembed(IC [, octs::Int]): Returns a canonical embedding of an interval class into interval space.\nintervaltype(Type{IC}) = I\nintervalclasstype(Type{I}) = IC","category":"page"},{"location":"interface/#Handling-Pitches","page":"The Generic Interface","title":"Handling Pitches","text":"","category":"section"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"Pitch operations generally interact with intervals (and can be derived from the interval operations):","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"P + I -> P\nI + P -> P\nP - I -> P\nP - P -> I\npc(P) -> PC\nembed(PC [, octaves]) -> P","category":"page"},{"location":"interface/#Other-useful-functions","page":"The Generic Interface","title":"Other useful functions","text":"","category":"section"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"Besides the specific functions of the interface, pitch and interval types generally implement basic functions such as","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"isless / <\nisequal / ==\nhash\nshow (usually also specialized for Pitch{I})","category":"page"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"Note that the ordering of pitches is generally not unique, so isless uses an appropriate convention for each interval type.","category":"page"},{"location":"interface/#Generic-API-Reference","page":"The Generic Interface","title":"Generic API Reference","text":"","category":"section"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"Here we only list the new functions that are introduced by this library, not the ones that are already defined in Base.","category":"page"},{"location":"interface/#Special-Intervals","page":"The Generic Interface","title":"Special Intervals","text":"","category":"section"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"unison\noctave\nchromsemi\nisstep","category":"page"},{"location":"interface/#Pitches.unison","page":"The Generic Interface","title":"Pitches.unison","text":"unison(T)\n\nReturns the interval of a unison for interval type T. Alias for Base.zero. New interval types should implement Base.zero, but user code should call unison for better interpretability.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Pitches.octave","page":"The Generic Interface","title":"Pitches.octave","text":"octave(T, [n=1])\n\nReturns the interval corresponding to an octave for interval type T. For interval classes, this should return zero(T) (a default method is provided).\n\nIf n is specified, the octave is multiplied by n first. This is equivalent to octave(T) * n.\n\nFor convenience, a fallback for octave(p::T, [n]) is provided. Only octave(T) needs to be implemented.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Pitches.chromsemi","page":"The Generic Interface","title":"Pitches.chromsemi","text":"chromsemi(I::Type)\n\nReturns a chromatic semitone of type I.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Pitches.isstep","page":"The Generic Interface","title":"Pitches.isstep","text":"isstep(p)\n\nFor diatonic intervals, indicates whether p is a step.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Classes-(Octave-Equivalence)","page":"The Generic Interface","title":"Classes (Octave Equivalence)","text":"","category":"section"},{"location":"interface/","page":"The Generic Interface","title":"The Generic Interface","text":"ic\npc\nembed\nintervaltype\nintervalclasstype","category":"page"},{"location":"interface/#Pitches.ic","page":"The Generic Interface","title":"Pitches.ic","text":"ic(i)\n\nReturns the interval class of an interval, removing the octave\n\n\n\n\n\n","category":"function"},{"location":"interface/#Pitches.pc","page":"The Generic Interface","title":"Pitches.pc","text":"pc(p)\n\nReturn the pitch class that corresponds to p.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Pitches.embed","page":"The Generic Interface","title":"Pitches.embed","text":"embed(ic, [oct=0])\nembed(pc, [oct=0])\n\nConverts an interval class to an interval in the canonical octave, adding oct octaves, if supplied. Also works for pitches.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Pitches.intervaltype","page":"The Generic Interface","title":"Pitches.intervaltype","text":"intervaltype(IC::Type)\n\nReturns for an interval class type IC the corresponding interval type. For convenience, intervaltype(ic::IC) is also provided.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Pitches.intervalclasstype","page":"The Generic Interface","title":"Pitches.intervalclasstype","text":"intervalclasstype(I::Type)\n\nReturns for an interval type I the corresponding interval class type. For convenience, intervalclasstype(p::P) is also provided.\n\n\n\n\n\n","category":"function"},{"location":"#Pitches.jl","page":"Pitches.jl","title":"Pitches.jl","text":"","category":"section"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"CurrentModule = Pitches","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"A library for handling musical pitches and intervals in a systematic way. For other (and mostly compatible) implementations see:","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"pitchtypes (Python)\na Haskell implementation (WIP, coming soon)\na Clojure(Script) implementation (WIP, coming soon)","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"The general interface is described in a separate specification.","category":"page"},{"location":"#Overview","page":"Pitches.jl","title":"Overview","text":"","category":"section"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"This library defines types for musical intervals and pitches as well as a generic interface for writing algorithms that work with different pitch and interval types. For example, you can write a function like this","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"transposeby(pitches, interval) = [pitch + interval for pitch in pitches]","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"and it will work with any midi pitch:","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"julia> transposeby((@midip [60, 63, 67]), midi(3))\n3-element Array{Pitch{MidiInterval},1}:\n p63\n p66\n p70","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"... midi pitch classes:","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"julia> transposeby(map(midipc, [3,7,10]), midic(3))\n3-element Array{Pitch{MidiIC},1}:\n pc6\n pc10\n pc1","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"... spelled pitch:","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"julia> transposeby([p\"C4\", p\"E4\", p\"G4\"], i\"m3+0\")\n3-element Array{Pitch{SpelledInterval},1}:\n E♭4\n G4\n B♭4","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"... spelled pitch classes:","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"julia> transposeby([p\"C\", p\"E\", p\"G\"], i\"m3\")\n3-element Array{Pitch{SpelledIC},1}:\n E♭\n G\n B♭","category":"page"},{"location":"","page":"Pitches.jl","title":"Pitches.jl","text":"... or any other pitch type.","category":"page"},{"location":"tutorial/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"tutorial/","page":"Getting Started","title":"Getting Started","text":"TODO","category":"page"},{"location":"logfreq/#Frequencies","page":"Frequencies","title":"Frequencies","text":"","category":"section"},{"location":"logfreq/","page":"Frequencies","title":"Frequencies","text":"TODO","category":"page"}]
}
